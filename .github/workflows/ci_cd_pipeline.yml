name: Python Flask CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build
      run: |
        # Add commands to build your application, if any
        echo "Build stage completed"

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests with pytest
      run: |
        pip install pytest pytest-cov
        pytest --cov=./

  scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      with:
        projectBaseDir: .
        sonarHost: ${{ secrets.SONAR_HOST }}
        sonarToken: ${{ secrets.SONAR_TOKEN }}

  approval:
    needs: scan
    runs-on: ubuntu-latest
    steps:
    - name: Manual Approval
      uses: actions/github-script@v3
      with:
        script: |
          const payload = JSON.stringify({
            event_type: 'approval_request',
            client_payload: {
              pull_request: context.payload.pull_request,
              action_id: context.run_id
            }
          });
          await github.repos.createDispatchEvent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            event_type: 'approval_request',
            client_payload: {
              pull_request: context.payload.pull_request,
              action_id: context.run_id
            }
          });

  deploy:
    needs: approval
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin <your-ecr-repository-url>
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t your-app .
        docker tag your-app:latest <your-ecr-repository-url>:latest
        docker push <your-ecr-repository-url>:latest
    - name: Deploy to AWS ECS
      run: |
        aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment
