
        
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1 # Update this to your AWS region
  ECR_REPOSITORY: my-ecr-repo # Update this to your ECR repository name
  ECS_SERVICE: my-ecs-service # Update this to your ECS service name
  ECS_CLUSTER: my-ecs-cluster # Update this to your ECS cluster name

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        run: python setup.py build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python 
        uses: actions/setup-python@v2 
        with:
          python-version:'3.x'
      
      - name : Install pytest and pytest-cov 
        run : |
          pip install pytest pytest-cov
      
      - name : Run tests with coverage report 
        run : |
          pytest --cov=./ --cov-report=xml 

  scan:
    needs:test 
    runs-on : ubuntu-latest
    
    steps :
     - name : Checkout code 
       uses : actions/checkout@v2
     
     - name : SonarQube Scan 
       uses : sonarsource/sonarqube-scan-action@master 
       env :
         SONAR_TOKEN : ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL : "https://sonarcloud.io" 

  deploy_approval_gate_stage :
   needs:[scan]
   runs-on:[ubuntu-latest]
   environment :
     name:"production"
     url:"http://my-app-url.com" # update the url of the app
   
   steps :
     - run :"echo 'Approval gate stage passed'"

  deploy_to_aws_ecs_stage :
   needs:[deploy_approval_gate_stage]
   runs-on:[ubuntu-latest]

   steps :
     - id:'login-ecr'
       uses:'aws-actions/amazon-ecr-login@v1'

     - id:'build-push-docker-image'
       uses:'docker/build-push-action@v2'
       with :
         context:'./'
         push:true,
         tags:$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     
     - id:'deploy-to-ecs'
       uses:'aws-actions/amazon-ecs-deploy-task-definition@v1'
       with :
         task-definition:"task-definition.json"
         service:$ECS_SERVICE,
         cluster:$ECS_CLUSTER,
         wait-for-service-stability:true
  

        